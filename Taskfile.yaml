version: '3'

vars:
  MODULE: github.com/FilipSolich/mkrepo

  DATETIME:
    sh: date --utc --iso-8601=seconds
  VERSION:
    sh: git describe --tags --abbrev=0 | sed 's/^v//'
  REVISION:
    sh: git rev-parse HEAD
  REVISION_SHORT:
    sh: git rev-parse --short HEAD

  REGISTRY: ghcr.io
  NAMESPACE: FilipSolich
  IMAGE: '{{.REGISTRY}}/{{.NAMESPACE}}/mkrepo'
  TAG_LATEST: '{{.IMAGE}}:latest'
  TAG_VERSION: '{{.IMAGE}}:{{.VERSION}}'
  TAG_VERSION_REVISION: '{{.TAG_VERSION}}-{{.REVISION_SHORT}}'

env:
  GOAMD64: v2
  GOARM64: v8.0

tasks:
  default:
    desc: Show this help
    silent: true
    aliases: [help, h]
    cmds:
      - task -l --sort none

  fmt:
    desc: Run go fmt
    cmds:
      - go fmt ./...

  vet:
    desc: Run go vet
    cmds:
      - go vet ./...

  lint:
    desc: Run lint
    cmds:
      - go tool golangci-lint run

  vulncheck:
    desc: Run vulnerability check
    cmds:
      - go tool govulncheck ./...

  build:
    desc: Build server
    aliases: [b]
    cmds:
      - go build -ldflags "-X {{.MODULE}}/internal.version={{.VERSION}} -X {{.MODULE}}/internal.buildDatetime={{.DATETIME}}" -o bin/server {{.MODULE}}/cmd/server

  run:
    desc: Run server
    deps: [build]
    aliases: [r]
    cmds:
      - bin/server

  test:
    desc: Run tests
    aliases: [t]
    cmds:
      - go test -v ./...

  clean:
    desc: Clean up
    aliases: [c]
    cmds:
      - rm -rf bin
      - rm -rf .task
      - find . -name '__debug_*' -type f -delete

  pre-commit:
    desc: Run pre-commit checks
    cmds:
      - task: fmt
      - task: vet
      - task: lint
      - task: vulncheck
      - task: build
      - task: test

  docker:build:
    desc: Build Docker image
    cmds:
      - docker build
        --build-arg MODULE={{.MODULE}}
        --build-arg VERSION={{.VERSION}}
        --build-arg REVISION={{.REVISION}}
        --build-arg DATETIME={{.DATETIME}}
        --build-arg IMAGE_REF={{.TAG_VERSION_REVISION}}
        -t {{.TAG_LATEST}} -t {{.TAG_VERSION_REVISION}} .
      - if git describe --exact-match --tags HEAD > /dev/null 2>&1; then docker tag {{.TAG_VERSION_REVISION}} {{.TAG_VERSION}}; fi

  docker:push:
    desc: Push Docker image
    cmds:
      - docker push {{.TAG_LATEST}}
      - docker push {{.TAG_VERSION_REVISION}}
      - if git describe --exact-match --tags HEAD > /dev/null 2>&1; then docker push {{.TAG_VERSION}}; fi

  release:
    desc: Release new version
    prompt: Do you want to release new version?
    preconditions:
      - git diff-index --quiet HEAD --
    cmds:
      - git tag -a v{{.VERSION}} -m "Release {{.VERSION}}"
      - git push origin v{{.VERSION}}
