version: '3'

interval: 1s

dotenv:
  - .env

env:
  CGO_ENABLED: 0
  GOAMD64: v2
  GOARM64: v8.0

vars:
  MODULE: github.com/mkrepo-dev/mkrepo

  DATETIME:
    sh: date --utc --iso-8601=seconds
  EXACT_VERSION:
    sh: if git describe --exact-match --tags HEAD > /dev/null 2>&1; then echo 0; else echo 1; fi
  VERSION_NUMBER:
    sh: git describe --tags --abbrev=0 | sed 's/^v//'
  REVISION:
    sh: git rev-parse HEAD
  REVISION_SHORT:
    sh: git rev-parse --short HEAD
  VERSION:
    sh: if [ {{.EXACT_VERSION}} = 0 ]; then echo {{.VERSION_NUMBER}}; else echo "{{.VERSION_NUMBER}}+{{.REVISION_SHORT}}"; fi

  REGISTRY: ghcr.io
  NAMESPACE: mkrepo-dev
  IMAGE: '{{.REGISTRY}}/{{.NAMESPACE}}/mkrepo'
  TAG_DEV: '{{.IMAGE}}:dev'
  TAG_LATEST: '{{.IMAGE}}:latest'
  TAG_VERSION_NUMBER: '{{.IMAGE}}:{{.VERSION_NUMBER}}'

tasks:
  default:
    desc: Show this help
    silent: true
    aliases: [help, h]
    cmds:
      - task -l --sort none

  generate:
    desc: Run go generate
    cmds:
      - go generate ./...

  fmt:
    desc: Run go fmt
    cmds:
      - go fmt ./...

  vet:
    desc: Run go vet
    cmds:
      - go vet ./...

  lint:
    desc: Run lint
    cmds:
      - go tool golangci-lint run

  vulncheck:
    desc: Run vulnerability check
    deps: [build]
    cmds:
      - go tool govulncheck -mode binary bin/server

  build:
    desc: Build server
    aliases: [b]
    sources:
      - 'cmd/**/*'
      - 'internal/**/*'
      - 'migration/**/*'
      - 'static/**/*'
      - 'template/**/*'
      - 'go.mod'
      - 'go.sum'
    cmds:
      - go build -gcflags "all=-N -l"
        -ldflags "-X {{.MODULE}}/internal.version={{.VERSION}} -X {{.MODULE}}/internal.revision={{.REVISION}} -X {{.MODULE}}/internal.buildDatetime={{.DATETIME}}"
        -o bin/server {{.MODULE}}/cmd/server

  run:
    desc: Run server
    deps: [build]
    aliases: [r]
    cmds:
      - bin/server

  test:
    desc: Run tests
    aliases: [t]
    cmds:
      - go test -v ./...

  clean:
    desc: Clean up
    aliases: [c]
    cmds:
      - rm -rf bin
      - rm -rf .task
      - find . -name '__debug_*' -type f -delete

  migrate:create:
    desc: Create migration file
    cmds:
      - go tool migrate create -ext sql -dir migration -seq {{.CLI_ARGS}}

  pre-commit:
    desc: Run pre-commit checks
    cmds:
      - task: generate
      - task: fmt
      - task: vet
      - task: lint
      - task: build
      - task: docker:build
      - task: test
      - task: vulncheck

  docker:build:
    desc: Build Docker image
    silent: true
    cmds:
      - |
        if [ {{.EXACT_VERSION}} = 0 ]; then
          echo "Building image for version {{.VERSION}}"
          docker build --build-arg VERSION={{.VERSION}} --build-arg REVISION={{.REVISION}} \
            --build-arg DATETIME={{.DATETIME}} --build-arg IMAGE_REF={{.TAG_VERSION_NUMBER}} \
            -t {{.TAG_LATEST}} -t {{.TAG_VERSION_NUMBER}} .
        else
          echo "Building image for dev version {{.VERSION}}"
          docker build --build-arg VERSION={{.VERSION}} --build-arg REVISION={{.REVISION}} \
            --build-arg DATETIME={{.DATETIME}} --build-arg IMAGE_REF={{.TAG_DEV}} \
            -t {{.TAG_DEV}} .
        fi

  docker:push:
    desc: Push Docker image
    silent: true
    cmds:
      - |
        if [ {{.EXACT_VERSION}} = 0 ]; then
          docker push {{.TAG_LATEST}} {{.TAG_VERSION_NUMBER}}
        else
          docker push {{.TAG_DEV}}
        fi

  release:
    desc: Release new version
    prompt: Do you want to release new version {{.VERSION}}?
    preconditions:
      - git diff-index --quiet HEAD --
    cmds:
      - git tag -a v{{.VERSION}} -m "Release {{.VERSION}}"
      - git push origin v{{.VERSION}}
